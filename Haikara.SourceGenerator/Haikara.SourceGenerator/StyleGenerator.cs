using System;
using System.IO;
using Haikara.Shared;
using Microsoft.CodeAnalysis;
using SourceGenerator.CodeTemplates.StyleTemplates;
using SourceGenerator.Providers;
using SourceGenerator.Utils;

namespace SourceGenerator;

[Generator(LanguageNames.CSharp)]
public class StyleGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var styleProvider = HaikaraUIProvider.GetStyleProvider(context);
        var generationSourcesProvider = GenerationSourceProvider.GetStyleGenerationSourcesProvider(styleProvider);

        context.RegisterSourceOutput(generationSourcesProvider, Execute);
    }

    private static void Execute(SourceProductionContext context,
        GenerationSource generationSource
    )
    {
        try
        {
            var ussFilePath = Path.ChangeExtension(generationSource.CsFilePath, "uss");
            if (!StyleFileReader.TryGetStyleFileInfo(
                    assetGuid: generationSource.AssetGuid,
                    assetFullPath: ussFilePath,
                    out var styleFileInfo)
               )
            {
                return;
            }

            var fullType = generationSource.UiContext.TargetSymbol
                .ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
                .Replace("global::", "")
                .Replace("<", "_")
                .Replace(">", "_");

            context.AddSource($"{fullType}.g.cs", new StyleTemplate(styleFileInfo), generationSource);
        }
        catch (Exception e)
        {
            context.AddSource("Exception.ExecutePartialView.g.cs",
                "// <auto-generated/>\n\n" + e + $"GUID*<{generationSource.AssetGuid}>");
        }
    }
}