using System;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using SourceGenerator.CodeTemplates.ViewTemplates;
using SourceGenerator.Providers;
using SourceGenerator.Utils;

namespace SourceGenerator;

[Generator(LanguageNames.CSharp)]
public class ViewGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var viewProvider = HaikaraUIProvider.GetViewProvider(context);
        var generationSourcesProvider = GenerationSourceProvider.GetViewGenerationSourcesProvider(viewProvider);

        var assemblyNameAndFilterProvider = AssemblyNameAndFilterProvider.Get(context);
        var viewInstallerProvider = generationSourcesProvider.Collect().Combine(assemblyNameAndFilterProvider);

        context.RegisterSourceOutput(viewInstallerProvider, ExecuteViewInstaller);
        context.RegisterSourceOutput(generationSourcesProvider, Execute);
    }

    private static void ExecuteViewInstaller(SourceProductionContext context,
        (ImmutableArray<GenerationSource> generationSources, string? assemblyName) source)
    {
        try
        {
            var generationSources = source.generationSources;
            var assemblyName = source.assemblyName;
            if (generationSources.Length == 0 || string.IsNullOrWhiteSpace(assemblyName) || assemblyName == null)
            {
                return;
            }

            context.AddSource(
                $"{assemblyName}.ViewInstaller.g.cs",
                new ViewInstaller(assemblyName),
                source.generationSources
            );
        }
        catch (Exception e)
        {
            context.AddSource("ExecuteInstaller.Exception.g.cs", "// <auto-generated/>\n\n" + e);
        }
    }

    private static void Execute(SourceProductionContext context,
        GenerationSource generationSource
    )
    {
        try
        {
            var fullType = generationSource.UiContext.TargetSymbol
                .ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
                .Replace("global::", "")
                .Replace("<", "_")
                .Replace(">", "_");

            context.AddSource($"{fullType}.g.cs", new ViewTemplate(), generationSource);
        }
        catch (Exception e)
        {
            context.AddSource("Exception.ExecutePartialView.g.cs",
                "// <auto-generated/>\n\n" + e + $"GUID*<{generationSource.AssetGuid}>");
        }
    }
}